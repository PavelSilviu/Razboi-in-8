#include <iostream>
#include<graphics.h>
#include <winbgim.h>
#include<windows.h>
#define MAX 10
#include<windows.h>
#include <stdlib.h>

using namespace std;

int tabla[MAX][MAX];
bool finalMeniu;
bool gata;
bool gataMeniul;
///n=nr linii si m=nr coloane
int n=8; int m=8;
int latura=80;
int i,j;
int width=m*latura;
int height=n*latura;
int stanga=(getmaxwidth()-width)/2; int dreapta=(getmaxwidth()+width)/2;
int sus=(getmaxheight()-height)/2; int jos=((getmaxheight())+height)/2;

void desenareTabla()
{
        readimagefile("negru.gif",stanga, sus, dreapta,jos);
        int x1,y1,x2,y2;
        setcolor(WHITE);
        for( int i=1;i<=n;i++ )
            for( int j=1;j<=m;j++ )
               {
                rectangle(stanga+latura*(i-1),sus+latura*(j-1),stanga+latura*i,sus+latura*j);///am facut patratele cu rectangle
                if(i%2==0 && j%2==0)///am colorat patratele
                {
                    setfillstyle(SOLID_FILL, WHITE);
                    floodfill(stanga+latura*(i-1)+1,sus+latura*(j-1)+1,WHITE);
                }
                if(i%2!=0 && j%2!=0)
                {
                    setfillstyle(SOLID_FILL, WHITE);
                    floodfill(stanga+latura*(i-1)+1,sus+latura*(j-1)+1,WHITE);
                }
               }
}
void desenarePiese(int i,int j,int piesa)
{
        int x1,y1,x2,y2;
        int linia=i;
        int coloana=j;
        x1=stanga+latura*(coloana-1); y1=sus+latura*(linia-1);
        x2=x1+latura; y2=y1+latura;
        if(piesa==1)
            readimagefile("piesa alba optimizat.gif",x1, y1, x2, y2);
        else
            readimagefile("piesa neagra optimizat.gif",x1, y1, x2, y2);
}

void stergerePiese(int i, int j)
{
                if((i+j)%2==0)///
                    readimagefile("alboptimizat.gif",stanga+latura*(j-1),sus+latura*(i-1),stanga+latura*(j-1)+latura,sus+latura*(i-1)+latura);
                else
                    readimagefile("negruoptimizat.gif",stanga+latura*(j-1),sus+latura*(i-1),stanga+latura*(j-1)+latura,sus+latura*(i-1)+latura);
}
void matriceaJocului()
{
        ///Jucator 1
        for(int i=1;i<=2;i++)///liniile 1 si 2
            for(int j=1;j<=m;j++)
            {
                if( (i+j)%2==0 )///pozitiile pare iau valoarea 1
                    tabla[i][j]=1;
            }
        ///Jucator 2
        for(int i=n-1;i<=n;i++)///liniile n si n-1
            for(int j=1;j<=m;j++)
            {
                if( (i+j)%2==0 )///pozitiile pare iau valoarea 2
                    tabla[i][j]=2;
            }
        ///Spatiu gol
        for( int i=1;i<=n;i++ )
            for( int j=1;j<=m;j++ )
            {
                if( (i+j)%2!=0 )///pozitiile impare iau valoarea 0
                    tabla[i][j]=0;
            }
}

void desenareTot()
{
    desenareTabla();
    matriceaJocului();
    for( int i=1;i<=n;i++ )
        for( int j=1;j<=m;j++ )
        {
            if( tabla[i][j]==1 )
                desenarePiese(i,j,1);
            else if( tabla[i][j]==2 )
                desenarePiese(i,j,2);
            else if(tabla[i][j]==0)
                stergerePiese(i,j);
        }
}

bool pozitieCorecta(int linia1, int coloana1, int linia2, int coloana2)
{
    if((linia2==linia1-1 && coloana2==coloana1+1 || linia2==linia1+1 && coloana2==coloana1+1 || linia2==linia1+1 && coloana2==coloana1-1 || linia2==linia1-1 && coloana2==coloana1-1) && tabla[linia2][coloana2]==0)
    return true;
    else
    return false;
}


void mutarePiesa(int jucator)
{
    int linia1,coloana1,linia2,coloana2,x,y;
    int x1, y1, x2, y2;
    int xmijloc, ymijloc;
    int click=false;
    do
        if(ismouseclick(WM_LBUTTONDOWN) && !click)
        {
            clearmouseclick(WM_LBUTTONDOWN);
            x=mousex(); y=mousey();
            if(x>stanga && x<dreapta && y>sus && y<jos)///daca am apasat unde trebuie
                {
                    linia1=(y-sus)/latura+1; coloana1=(x-stanga)/latura+1;
                    if(tabla[linia1][coloana1]==jucator)
                    {
                        click=true;///daca ai apasat click unde trebuie, click devine true, altfel se repeta continuu in bucla
                    }
                }
            else if(x>(getmaxwidth()-(200+10)) && x<(getmaxwidth()-10) && y>10 && y<(106+10) )///daca am apasat pe exit, va iesi din joc
            {
                click=true;///daca ai apasat click unde trebuie, click devine true, altfel se repeta continuu in bucla
                exit(0);///inchide programul
            }
        }
    while (!click);
    click=false;
    do
        if(ismouseclick(WM_LBUTTONDOWN) && !click)
        {
            clearmouseclick(WM_LBUTTONDOWN);
            x=mousex(); y=mousey();
            if(x>stanga && x<dreapta && y>sus && y<jos)///daca am apasat unde trebuie
            {
                    linia2=(y-sus)/latura+1; coloana2=(x-stanga)/latura+1;
                    if(pozitieCorecta(linia1, coloana1, linia2, coloana2))
                       {
                           click=true;
                       }
            }

            else if(x>(getmaxwidth()-(200+10)) && x<(getmaxwidth()-10) && y>10 && y<(106+10) )///daca am apasat pe exit, va iesi din joc
            {
                click=true;///daca ai apasat click unde trebuie, click devine true, altfel se repeta continuu in bucla
                exit(0);
            }
           // cout<<"linia 2: "<<linia2<<endl;cout<<"coloana 2: "<<coloana2<<endl;
        }
    while (!click);
    tabla[linia1][coloana1]=0;
    tabla[linia2][coloana2]=jucator;
    stergerePiese(linia1,coloana1);
    desenarePiese(linia2,coloana2,jucator);
 }

 bool castigat(int jucator)
{
    return false;
}
int butonApasatMeniu(int x, int y, int &click)
{
    int nrButon;
    if(x>((getmaxwidth()-300)/2) && x<((getmaxwidth()-320)/2+300) && y>((getmaxheight()-100)/2) && y<(((getmaxheight()-100)/2)+100))///daca am apasat buton1
    {
            click=true;///daca ai apasat click unde trebuie, click devine true, altfel se repeta continuu in bucla
            nrButon=1;
    }
    else if (x>((getmaxwidth()-300)/2) && x<((getmaxwidth()-320)/2+300) && y>((getmaxheight()-100)/2+100+100) && y<(((getmaxheight()-100)/2)+100)+100+100)///daca am apasat buton2
    {
            click=true;///daca ai apasat click unde trebuie, click devine true, altfel se repeta continuu in bucla
            nrButon=2;
    }
    else if (x>((getmaxwidth()-300)/2) && x<((getmaxwidth()-320)/2+300) && y>((getmaxheight()-100)/2) && y<(((getmaxheight()-100)/2)+100))///daca am apasat buton3
    {
            click=true;///daca ai apasat click unde trebuie, click devine true, altfel se repeta continuu in bucla
            nrButon=3;
    }
    return nrButon;
}
void meniuPrincipal(bool &finalMeniu)
{
    int click=false;
    readimagefile("menuu.jpg",0, 0, getmaxwidth(),getmaxheight());
    readimagefile("play.gif",(getmaxwidth()-300)/2,(getmaxheight()-100)/2,(getmaxwidth()-300)/2+300,(getmaxheight()+100)/2);
    readimagefile("help.gif",(getmaxwidth()-300)/2,(getmaxheight()-100)/2+100+100,(getmaxwidth()-300)/2+300,(getmaxheight()+100)/2+100+100);
   // settextjustify(CENTER_TEXT, CENTER_TEXT);
    //outtextxy(getmaxx()/2,jos/2, "Apasati CLICK pentru a incepe");
    while (!click)
        {
            if(ismouseclick(WM_LBUTTONDOWN) && !click )
            {
                clearmouseclick(WM_LBUTTONDOWN);
                int x=mousex(); int y=mousey();
                butonApasatMeniu(x,y,click);
            }
        }
        cleardevice();///aici am golit fereastra
        int x=mousex(); int y=mousey();
        if(butonApasatMeniu(x,y,click)==1)
        finalMeniu=1;
        else
        {
            readimagefile("info.gif",(getmaxwidth()-400)/2,(getmaxheight()-400)/2,(getmaxwidth()-400)/2+400,(getmaxheight()+400)/2);
            readimagefile("previous_icon.gif",getmaxwidth()-(200+10),10,getmaxwidth()-10,200+10);
            bool click=false;
            while (!click)
            {
                if(ismouseclick(WM_LBUTTONDOWN) && !click )
                {
                    clearmouseclick(WM_LBUTTONDOWN);
                    int x=mousex(); int y=mousey();
                    click=true;
                    cleardevice();///aici am golit fereastra
                }
            }
            meniuPrincipal(finalMeniu);
        }

}
void iesireJoc()
{
    //mousex()>(getmaxwidth()-(200+10)) && mousex()<(getmaxwidth()-10) && mousey()>10 && mousey()<(106+10)
   // int click=false;
    readimagefile("exit.gif",getmaxwidth()-(200+10),10,getmaxwidth()-10,106+10);
}

void cineMuta1()
{
    readimagefile("piesa alba optimizat.gif",getmaxwidth()-(180+10),200,getmaxwidth()-50,106+10+200);
}

void cineMuta2()
{
    readimagefile("piesa neagra optimizat.gif",getmaxwidth()-(180+10),200,getmaxwidth()-50,106+10+200);
}

void afisareMatrice()
{
    for( int i=1;i<=n;i++ )
    {
        for( int j=1;j<=m;j++ )
        {
            cout<<tabla[i][j]<<" ";
        }
        cout<<endl;
    }
}

int main()
{
    //PlaySound(TEXT("C:\\Users\\pavel\\OneDrive\\Desktop\\iustin\\Silviu\\joc\\sound1.wav"), NULL,SND_ASYNC);
    initwindow(getmaxwidth( ), getmaxheight( ),"titlu");
    meniuPrincipal(finalMeniu);
    if(finalMeniu)
    {
        readimagefile("cs.gif",stanga-0.95*latura, sus-0.90*latura, dreapta+0.95*latura, jos+0.90*latura);
        desenareTot();
        iesireJoc();
        afisareMatrice();
        do
        {
              //incepe piesa
              cineMuta1();
              mutarePiesa(1);
              //incepe piesa 2
              cineMuta2();
              mutarePiesa(2);
              afisareMatrice();
        }
        while (!castigat(1) && !castigat(2));
    }
    getch();
    closegraph();
    return 0;
}






